<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>插入排序</title>
      <link href="/2023/11/03/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/11/03/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h3 id="1-概念定义"><a href="#1-概念定义" class="headerlink" title="1. 概念定义"></a><strong>1. 概念定义</strong></h3><p><strong>插入排序</strong>（Insertion Sort），一般也被称为直接插入排序，是一种简单直观的排序算法。</p><p><strong>工作原理</strong>：将待排列元素划分为「已排序」和「未排序」两部分，每次从「未排序的」元素中选择一个插入到「已排序的」元素中的正确位置。</p><p>这个过程类似于平时打扑克牌时摸牌的操作：右手摸牌，根据牌面大小，放到左手中正确的位置。</p><p><a href="https://gitee.com/LowProfile666/image-bed/raw/master/img/insertion-sort-1-animate-example.svg">这里有张动图，但是好像放不上来</a></p><p>比如：1 2 6 3 4 7 5 ，将其从小到大排序。</p><p>第一次参与排序的数据：2 6 3 4 7 5（因为最开始没有[已排序的]，所以第一个数可以直接作为[已排序的]）</p><p>第一次循环：</p><p> 当前的数：2</p><p> 当前已有序列表：1</p><p> 2 &gt; 1 : 2 放在 1 之后</p><p>第二次参与排序的数据：6 3 4 7 5</p><p>第二次循环：</p><p> 当前的数：6</p><p> 当前已有序列表：1 2</p><p> 6 &gt; 2 : 6 放在 2 之后</p><p>第三次参与排序的数据：3 4 7 5</p><p>第三次循环：</p><p> 当前的数：3</p><p> 当前已有序列表：1 2 6</p><p> 3 &lt; 6 :</p><p> 3 &gt; 2 : 3 放在 2 之后</p><p>第四次参与排序的数据：4 7 5</p><p>第四次循环：</p><p> 当前的数：4</p><p> 当前已有序列表：1 2 3 6</p><p> 4 &lt; 6 :</p><p> 4 &gt; 3 : 4 放在 3 之后</p><p>第五次参与排序的数据：7 5</p><p>第五次循环：</p><p> 当前的数：7</p><p> 当前已有序列表：1 2 3 4 6</p><p> 7 &gt; 6 : 7 放在 6 之后</p><p>第六次参与排序的数据：5</p><p>第六次循环：</p><p> 当前的数：5</p><p> 当前已有序列表：1 2 3 4 6 7</p><p> 5 &lt; 7 :</p><p> 5 &lt; 6 :</p><p> 5 &gt; 4 : 5 放在 4 之后</p><p>至此，数据全部排序为：1 2 3 4 5 6 7</p><p><strong>具体实现</strong>：使用双层循环，外层循环枚举除了第一个元素之外的所有元素，内层循环遍历当前元素前面的有序表，进行待插入位置查找，并进行移动。时间复杂度为O(n^2^)，空间复杂度为O(1)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> *number, <span class="type">int</span> n)</span>    <span class="comment">//定义一个插入函数&quot;insertionSort&quot; </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, tmp;  </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)  <span class="comment">//循环遍历 </span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp = number[i];  <span class="comment">//将tmp每一次赋值为number[i]  </span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)  <span class="comment">//比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp &lt; number[j]) number[j+<span class="number">1</span>] = number[j];  <span class="comment">//更小交换</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        number[j+<span class="number">1</span>] = tmp;   <span class="comment">//否则添加到最后</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-题目练习"><a href="#2-题目练习" class="headerlink" title="2. 题目练习"></a><strong>2. 题目练习</strong></h3><ol><li><a href="https://leetcode-cn.com/problems/merge-sorted-array/">合并两个有序数组（基础题）</a></li><li><a href="https://leetcode-cn.com/problems/insertion-sort-list/">对链表进行插入排序（提高题）</a></li></ol><h3 id="3-解题报告"><a href="#3-解题报告" class="headerlink" title="3. 解题报告"></a><strong>3. 解题报告</strong></h3><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">合并两个有序数组</a></p><p><strong>题目描述</strong></p><blockquote><p>给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p><p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p></blockquote><p><strong>解题思路</strong></p><p>先将 nums2 的元素放到 nums1 里去，然后对整个 nums1 数组进行插入排序。</p><p><strong>C代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> *number, <span class="type">int</span> n)</span>    <span class="comment">//定义一个插入函数&quot;insertionSort&quot; </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, tmp;  </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)  <span class="comment">//循环遍历 </span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp = number[i];  <span class="comment">//将tmp每一次赋值为number[i]  </span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)  <span class="comment">//比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp &lt; number[j]) number[j+<span class="number">1</span>] = number[j];  <span class="comment">//更小交换</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        number[j+<span class="number">1</span>] = tmp;   <span class="comment">//否则添加到最后</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>* nums1, <span class="type">int</span> nums1Size, <span class="type">int</span> m, <span class="type">int</span>* nums2, <span class="type">int</span> nums2Size, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i,j= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = m; i &lt; m+n; i++)  <span class="comment">//合并数组</span></span><br><span class="line">    &#123;  </span><br><span class="line">        nums1[i] = nums2[j];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> size = m + n;</span><br><span class="line">    insertionSort(nums1, size);  <span class="comment">//排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/insertion-sort-list/">对链表进行插入排序</a></p><p><strong>题目描述</strong></p><blockquote><p>给定单个链表的头 head ，使用 插入排序 对链表进行排序，并返回 排序后链表的头 。</p></blockquote><p><strong>解题思路</strong></p><p> 利用直接插入排序的算法思想，单链表无法向前遍历，需要通过三个指针完成操作。</p><p><strong>C代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">insertionSortList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)                                                        <span class="comment">//链表为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">L</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode)); <span class="comment">//辅助结点</span></span><br><span class="line">    L-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">cur</span> =</span> head-&gt;next, *pre = head, *tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;                                                     <span class="comment">//遍历链表</span></span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;val &gt;= pre-&gt;val)&#123;                                           <span class="comment">//寻找需要向前插入的结点</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tmp = L;</span><br><span class="line">            <span class="keyword">while</span>(tmp-&gt;next-&gt;val &lt; cur-&gt;val)                                <span class="comment">//寻找插入位置</span></span><br><span class="line">                tmp = tmp-&gt;next;</span><br><span class="line">            pre-&gt;next = cur-&gt;next;                                          <span class="comment">//进行插入</span></span><br><span class="line">            cur-&gt;next = tmp-&gt;next;</span><br><span class="line">            tmp-&gt;next = cur;</span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> L-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> daily training </tag>
            
            <tag> insertion sort </tag>
            
            <tag> link list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2023/11/03/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/11/03/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>直观且简单的一种排序，将未排序的头个元素与后面的比较，选择最小的放到最前。时间复杂度为O(n^2^)，空间复杂度为O(1)。 </p><p>例如：[4, 7, 2, 5]   ——&gt; 将4与后面的7, 2, 5比较——&gt; 把最小的2与4的位置调换 ——&gt; 将第二位的7与后面的数字比较 ——&gt; 将7与后面数字中最小的4调换 …… 以此类推。</p><h5 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void selectionSort(int* nums, int numsSize) &#123;</span><br><span class="line">    int i, j, min;</span><br><span class="line">    for(i = 0; i &lt; numsSize - 1; ++i) &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        for(j = i + 1; j &lt; numsSize; ++j) &#123;</span><br><span class="line">            if(nums[j] &lt; nums[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int tmp = nums[min];</span><br><span class="line">        nums[min] = nums[i];</span><br><span class="line">        nums[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h5><p><a href="https://leetcode.cn/problems/can-make-arithmetic-progression-from-sequence/">判断能否形成等差数列</a></p><p><a href="https://leetcode.cn/problems/largest-number-at-least-twice-of-others/">至少是其他数字两倍的最大数</a></p><p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></p><p><a href="https://leetcode.cn/problems/sort-colors/">颜色分类</a></p><h5 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h5><p>4道题目均可以采用调用排序函数后对排序过的数组进行操作得出答案，由于较为简单，因此就不放题解了~</p><p>（绝对不是因为偷懒，绝对不是！）</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> daily training </tag>
            
            <tag> selection sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome! This is my first blog.</title>
      <link href="/2023/11/02/Welcome-This-is-my-first-blog/"/>
      <url>/2023/11/02/Welcome-This-is-my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome!"></a>Welcome!</h1><p>Welcome to my blog!</p><p>I will post some articles here. They might be useful, but I think most of them will be useless but funny. My native language is Chinese, so most of the articles will be written in Chinese. But I may translate some of them into English in order to improve my ability.</p><p>Thank you for spending time reading. See you again!</p>]]></content>
      
      
      <categories>
          
          <category> English Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Start </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客！</title>
      <link href="/2023/11/02/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81/"/>
      <url>/2023/11/02/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎！"><a href="#欢迎！" class="headerlink" title="欢迎！"></a>欢迎！</h1><p>我希望在这里分享一些有用或者有趣的东西。</p><p>作为一名技术小白，我希望有一个地方能够记录我的成长，并且同时能够帮助一些有需要的人。所以想到了搭建一个属于我自己的博客。在查阅了众多资料、解决了各种困难后，这个网站终于初现雏形。虽然他现在还很简陋，但是我相信随着我的进步，他一定会更加完善，最后变成一个优雅的个人博客。我很期待那一天的到来。</p><p>也欢迎大家访问、留言（后面会开放的……吧），希望能与小白共同成长，让大犇驻足相助~</p><h6 id="博客0-0测试版（因为当时没有截图所以找了一张相近的顶一下）"><a href="#博客0-0测试版（因为当时没有截图所以找了一张相近的顶一下）" class="headerlink" title="博客0.0测试版（因为当时没有截图所以找了一张相近的顶一下）"></a>博客0.0测试版（因为当时没有截图所以找了一张相近的顶一下）</h6><p><img src="https://s2.loli.net/2023/11/02/3apnkItSCyvBVQD.jpg" alt="屏幕截图 2023-11-02 172526.jpg"></p><h6 id="博客1-0测试版"><a href="#博客1-0测试版" class="headerlink" title="博客1.0测试版"></a>博客1.0测试版</h6><p><img src="https://s2.loli.net/2023/11/02/m7IPrzYM9tB6yFl.jpg" alt="屏幕截图 2023-11-02 172200.jpg"></p><h6 id="博客1-1发布版"><a href="#博客1-1发布版" class="headerlink" title="博客1.1发布版"></a>博客1.1发布版</h6><p><img src="https://s2.loli.net/2023/11/02/yxGDq8OVnbvKjc3.png" alt="屏幕截图 2023-11-02 180941.png"></p>]]></content>
      
      
      <categories>
          
          <category> 岁月史书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Start </tag>
            
            <tag> History </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/01/hello-world/"/>
      <url>/2023/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to a website created with <a href="https://hexo.io/">Hexo</a>! This is the very first post. To memorialize it, I named him “Hello World”.</p><p>Check <a href="https://hexo.io/docs/">documentation</a> for more info. If  get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h2><p>As you can see, this article is mostly created by Hoxe, a useful tool to build a blog. I keep this page not only   to show my gratitude, but also to help me when I forget how to use it. If you also want to set up a personal blog, you can try it! And remember, the official manual is always the best choice when you want to learn something.</p>]]></content>
      
      
      <categories>
          
          <category> English Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Start </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
