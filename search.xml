<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客搭建教程</title>
      <link href="/2023/11/04/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2023/11/04/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建教程"><a href="#博客搭建教程" class="headerlink" title="博客搭建教程"></a>博客搭建教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p><p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p><p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a>GitHub Pages 是什么？</h3><ul><li><a href="https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么?"></a>Hexo 是什么?</h3><ul><li>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a></li></ul><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><img src="E:\Blogs\GitHub_Blogs\source\img\Hexo + GitHub 文章发布原理.png" alt="Hexo + GitHub 文章发布原理" style="zoom: 50%;" /><h3 id="优点和不足"><a href="#优点和不足" class="headerlink" title="优点和不足"></a>优点和不足</h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p><p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>输入代码时，核对准确，最好切换成英文输入法；</li><li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li><li>统一使用 Git Bash 进行操作；</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li><li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p><p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p><img src="E:\Blogs\GitHub_Blogs\source\img\屏幕截图1png.png" alt="屏幕截图1png" style="zoom: 50%;" /><h2 id="2-连接-Github"><a href="#2-连接-Github" class="headerlink" title="2. 连接 Github"></a>2. 连接 Github</h2><p>使用邮箱注册 <a href="https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p><p>桌面按住shift右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><p><strong>创建 SSH 密匙</strong>：</p><p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p><p><strong>添加密匙：</strong></p><p>进入 [C:\Users\用户名\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><img src="E:\Blogs\GitHub_Blogs\source\img\屏幕截图 2023-11-04 220045.png" alt="屏幕截图 2023-11-04 220045" style="zoom: 67%;" /><p><strong>验证连接：</strong></p><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p><img src="E:\Blogs\GitHub_Blogs\source\img\屏幕截图 2023-11-04 212102.png" alt="屏幕截图 2023-11-04 212102" style="zoom:67%;" /><p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p><h2 id="3-创建-Github-Pages-仓库"><a href="#3-创建-Github-Pages-仓库" class="headerlink" title="3. 创建 Github Pages 仓库"></a>3. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 <code>用户名.github.io</code></li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li></ul><p>填好后点击 Create repository 创建。</p><img src="E:\Blogs\GitHub_Blogs\source\img\屏幕截图 2023-11-04 212129.png" alt="屏幕截图 2023-11-04 212129" style="zoom: 50%;" /><p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p><h2 id="4-本地安装-Hexo-博客程序"><a href="#4-本地安装-Hexo-博客程序" class="headerlink" title="4. 本地安装 Hexo 博客程序"></a>4. 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>使用 npm 一键安装 Hexo 博客程序：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装时间有点久（想要加快可以试试魔法），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p><img src="E:\Blogs\GitHub_Blogs\source\img\屏幕截图 2023-11-04 212141.png" alt="屏幕截图 2023-11-04 212141" style="zoom: 67%;" /><h3 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="4.2 Hexo 初始化和本地预览"></a>4.2 Hexo 初始化和本地预览</h3><p>新建一个文件夹作为你博客的仓库。你后面的工作将大部分在这个文件夹中完成。</p><p><strong>初始化并安装所需组件：</strong></p><p>在文件夹中按住shift右键，选择Git Bash Here（注意，以后的Git Bash最好也都这么启动）。输入下面的指令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure><p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure><p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p><img src="E:\Blogs\GitHub_Blogs\source\img\屏幕截图 2023-11-04 212154.png" alt="屏幕截图 2023-11-04 212154" style="zoom: 67%;" /><p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p><p>Hexo 博客文件夹目录结构如下：</p><img src="E:\Blogs\GitHub_Blogs\source\img\屏幕截图 2023-11-04 212225.png" alt="屏幕截图 2023-11-04 212225" style="zoom: 67%;" /><h2 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5. 部署 Hexo 到 GitHub Pages"></a>5. 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先<strong>安装 hexo-deployer-git</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h2 id="6-开始使用"><a href="#6-开始使用" class="headerlink" title="6. 开始使用"></a>6. 开始使用</h2><h3 id="7-1-发布文章"><a href="#7-1-发布文章" class="headerlink" title="7.1 发布文章"></a>7.1 发布文章</h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>然后 source 文件夹中会出现一个 My-New-Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure><hr><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">  - Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">  - PS3</span><br><span class="line">  - Games</span><br><span class="line">---</span><br><span class="line">&quot;Your article here&quot;</span><br></pre></td></tr></table></figure><h3 id="7-2-网站设置"><a href="#7-2-网站设置" class="headerlink" title="7.2 网站设置"></a>7.2 网站设置</h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p><p>注意：冒号后要加一个空格！</p><h3 id="7-3-更换主题"><a href="#7-3-更换主题" class="headerlink" title="7.3 更换主题"></a>7.3 更换主题</h3><p>Hexo提供了非常多好看的主题（是的，经过美化后能够达各种效果），其中应用较为广泛的是Butterfly。关于更换主题和美化页面的教程，后面可能会单独写一篇文章。要是太着急的话，可以访问Hexo的官网寻找（他甚至还有简中，他真的，我哭死）。记住，最靠谱的永远是官方的手册！（RTFM, bro!）</p><h3 id="7-4-常用命令"><a href="#7-4-常用命令" class="headerlink" title="7.4 常用命令"></a>7.4 常用命令</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure><h2 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8 常见问题"></a>8 常见问题</h2><p><strong>1、修改并部署后没有效果</strong></p><p>使用 <code>hexo clean</code> 清理后重新部署。</p><p><strong>2、开启 HTTPS 后访问网站显示连接不安全？</strong></p><p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p><p><strong>3、npm 下载速度慢，甚至完全没反应</strong></p><p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p><p>临时更换方法：在 npm 安装命令后面加上：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p><p>可以说是一种比较极客的写博客方式，但是优势也是明显的——免费稳定省心，比较适合爱折腾研究的用户，或者没有在线发文需求的朋友。</p><p>如果在自己部署的过程中出现了问题，可以在下方留言，或者阅读官方的手册（更推荐！）。心动不如行动，赶快行动起来吧！</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2023/11/04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/11/04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p><strong>1. 概念定义</strong></p><p><strong>冒泡排序</strong>（<strong>Bubble Sort</strong>）又称为<strong>泡式排序</strong>，是一种简单的排序算法。</p><p><strong>核心思想</strong>：它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><p>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就像水中的气泡会冒起来一样。</p><p><strong>运作步骤</strong>（升序排列）：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p>比如：</p><p>原始数据：3 2 7 8 6，将其按升序排列。</p><p>第一次循环：（最大的跑到最右边）</p><p> 3 2 7 8 6 –&gt; 2 3 7 8 6 （3和2比较，3 &lt; 2，所以3和2交换位置）</p><p> 2 3 7 8 6 –&gt; 2 3 7 8 6 （3和7比较。3 &lt; 7，所以3和7不用交换位置）</p><p> 2 3 7 8 6 –&gt; 2 3 7 8 6 （7和8比较，7 &lt; 8，所以7和8不用交换位置）</p><p> 2 3 7 8 6 –&gt; 2 3 7 6 8 （8和6比较，8 &gt; 6，所以8和6交换位置）</p><p>经过第1次循环，此时剩下参与比较的数据：2 3 7 6</p><p>第二次循环：</p><p> 2 3 7 6 –&gt; 2 3 7 6 （2和3比较，不需要交换位置）</p><p> 2 3 7 6 –&gt; 2 3 7 6 （3和7比较，不需要交换位置）</p><p> 2 3 7 6 –&gt; 2 3 6 7 （7和6比较，7 &gt; 6，所以7和6交换位置）</p><p>经过第2次循环，此时剩下参与比较的数据：2 3 6</p><p>第三次循环：</p><p> 2 3 6 （2和3比较，不需要交换位置）</p><p> 2 3 6 （3和6比较，不需要交换位置）</p><p>经过第3次循环，此时剩下参与比较的数据：2 3</p><p>第四次循环：</p><p> 2 3 （2和3比较，不需要交换位置）</p><p>至此，5个数经历了4次循环，每次循环都将当前最大的书交换的最右的位置，然后下次循环就不再考虑该数。</p><p><strong>具体实现</strong>：使用双重循环，外层循环控制循环的次数，内层循环进行数字的比较。内层每一次循环结束之后，都要找出最大的数据，放到参与比较的这堆数据的最右边，下次循环不再比较该数。</p><p><strong>C代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; --i) &#123;  <span class="comment">//因为每次比较两个数，所以总共n个数，只需要比较n-1次（外循环n-1次）</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; ++j) &#123;  <span class="comment">//每次比较完后，最大的值在下一次比较中不用比较，所以每次比较只需要循环n-1-i 次（内循环n-1-i次）</span></span><br><span class="line">            <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = nums[j];</span><br><span class="line">                nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                nums[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-题目练习"><a href="#2-题目练习" class="headerlink" title="2. 题目练习"></a><strong>2. 题目练习</strong></h2><ol><li><a href="https://leetcode-cn.com/problems/sort-colors/">颜色分类</a></li><li><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></li><li><a href="https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/">至少是其他数字两倍的最大数</a></li></ol><h2 id="3-解题报告"><a href="#3-解题报告" class="headerlink" title="3. 解题报告"></a><strong>3. 解题报告</strong></h2><p><a href="https://leetcode-cn.com/problems/sort-colors/">颜色分类</a></p><p><strong>题目描述</strong></p><blockquote><p>给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><p>必须在不使用库内置的 sort 函数的情况下解决这个问题。</p></blockquote><p><strong>解题思路</strong></p><p>使用冒泡排序将数组按升序排列，排完序后相同的数就会相邻。</p><p><strong>C代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; --i) &#123;  <span class="comment">//因为每次比较两个数，所以总共n个数，只需要比较n-1次（外循环n-1次）</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; ++j) &#123;  <span class="comment">//每次比较完后，最大的值在下一次比较中不用比较，所以每次比较只需要循环n-1-i 次（内循环n-1-i次）</span></span><br><span class="line">            <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = nums[j];</span><br><span class="line">                nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                nums[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    bubbleSort(nums, numsSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="剩下的题目大同小异，在此不多做展示。"><a href="#剩下的题目大同小异，在此不多做展示。" class="headerlink" title="剩下的题目大同小异，在此不多做展示。"></a>剩下的题目大同小异，在此不多做展示。</h5>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Daily Training </tag>
            
            <tag> Bubble Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2023/11/03/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/11/03/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h3 id="1-概念定义"><a href="#1-概念定义" class="headerlink" title="1. 概念定义"></a><strong>1. 概念定义</strong></h3><p><strong>插入排序</strong>（Insertion Sort），一般也被称为直接插入排序，是一种简单直观的排序算法。</p><p><strong>工作原理</strong>：将待排列元素划分为「已排序」和「未排序」两部分，每次从「未排序的」元素中选择一个插入到「已排序的」元素中的正确位置。</p><p>这个过程类似于平时打扑克牌时摸牌的操作：右手摸牌，根据牌面大小，放到左手中正确的位置。</p><p><a href="https://gitee.com/LowProfile666/image-bed/raw/master/img/insertion-sort-1-animate-example.svg">这里有张动图，但是好像放不上来</a></p><p>比如：1 2 6 3 4 7 5 ，将其从小到大排序。</p><p>第一次参与排序的数据：2 6 3 4 7 5（因为最开始没有[已排序的]，所以第一个数可以直接作为[已排序的]）</p><p>第一次循环：</p><p> 当前的数：2</p><p> 当前已有序列表：1</p><p> 2 &gt; 1 : 2 放在 1 之后</p><p>第二次参与排序的数据：6 3 4 7 5</p><p>第二次循环：</p><p> 当前的数：6</p><p> 当前已有序列表：1 2</p><p> 6 &gt; 2 : 6 放在 2 之后</p><p>第三次参与排序的数据：3 4 7 5</p><p>第三次循环：</p><p> 当前的数：3</p><p> 当前已有序列表：1 2 6</p><p> 3 &lt; 6 :</p><p> 3 &gt; 2 : 3 放在 2 之后</p><p>第四次参与排序的数据：4 7 5</p><p>第四次循环：</p><p> 当前的数：4</p><p> 当前已有序列表：1 2 3 6</p><p> 4 &lt; 6 :</p><p> 4 &gt; 3 : 4 放在 3 之后</p><p>第五次参与排序的数据：7 5</p><p>第五次循环：</p><p> 当前的数：7</p><p> 当前已有序列表：1 2 3 4 6</p><p> 7 &gt; 6 : 7 放在 6 之后</p><p>第六次参与排序的数据：5</p><p>第六次循环：</p><p> 当前的数：5</p><p> 当前已有序列表：1 2 3 4 6 7</p><p> 5 &lt; 7 :</p><p> 5 &lt; 6 :</p><p> 5 &gt; 4 : 5 放在 4 之后</p><p>至此，数据全部排序为：1 2 3 4 5 6 7</p><p><strong>具体实现</strong>：使用双层循环，外层循环枚举除了第一个元素之外的所有元素，内层循环遍历当前元素前面的有序表，进行待插入位置查找，并进行移动。时间复杂度为O(n^2^)，空间复杂度为O(1)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> *number, <span class="type">int</span> n)</span>    <span class="comment">//定义一个插入函数&quot;insertionSort&quot; </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, tmp;  </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)  <span class="comment">//循环遍历 </span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp = number[i];  <span class="comment">//将tmp每一次赋值为number[i]  </span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)  <span class="comment">//比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp &lt; number[j]) number[j+<span class="number">1</span>] = number[j];  <span class="comment">//更小交换</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        number[j+<span class="number">1</span>] = tmp;   <span class="comment">//否则添加到最后</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-题目练习"><a href="#2-题目练习" class="headerlink" title="2. 题目练习"></a><strong>2. 题目练习</strong></h3><ol><li><a href="https://leetcode-cn.com/problems/merge-sorted-array/">合并两个有序数组（基础题）</a></li><li><a href="https://leetcode-cn.com/problems/insertion-sort-list/">对链表进行插入排序（提高题）</a></li></ol><h3 id="3-解题报告"><a href="#3-解题报告" class="headerlink" title="3. 解题报告"></a><strong>3. 解题报告</strong></h3><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">合并两个有序数组</a></p><p><strong>题目描述</strong></p><blockquote><p>给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p><p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p></blockquote><p><strong>解题思路</strong></p><p>先将 nums2 的元素放到 nums1 里去，然后对整个 nums1 数组进行插入排序。</p><p><strong>C代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> *number, <span class="type">int</span> n)</span>    <span class="comment">//定义一个插入函数&quot;insertionSort&quot; </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, tmp;  </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)  <span class="comment">//循环遍历 </span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp = number[i];  <span class="comment">//将tmp每一次赋值为number[i]  </span></span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)  <span class="comment">//比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp &lt; number[j]) number[j+<span class="number">1</span>] = number[j];  <span class="comment">//更小交换</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        number[j+<span class="number">1</span>] = tmp;   <span class="comment">//否则添加到最后</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>* nums1, <span class="type">int</span> nums1Size, <span class="type">int</span> m, <span class="type">int</span>* nums2, <span class="type">int</span> nums2Size, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i,j= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = m; i &lt; m+n; i++)  <span class="comment">//合并数组</span></span><br><span class="line">    &#123;  </span><br><span class="line">        nums1[i] = nums2[j];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> size = m + n;</span><br><span class="line">    insertionSort(nums1, size);  <span class="comment">//排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/insertion-sort-list/">对链表进行插入排序</a></p><p><strong>题目描述</strong></p><blockquote><p>给定单个链表的头 head ，使用 插入排序 对链表进行排序，并返回 排序后链表的头 。</p></blockquote><p><strong>解题思路</strong></p><p> 利用直接插入排序的算法思想，单链表无法向前遍历，需要通过三个指针完成操作。</p><p><strong>C代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">insertionSortList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)                                                        <span class="comment">//链表为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">L</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode)); <span class="comment">//辅助结点</span></span><br><span class="line">    L-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">cur</span> =</span> head-&gt;next, *pre = head, *tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;                                                     <span class="comment">//遍历链表</span></span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;val &gt;= pre-&gt;val)&#123;                                           <span class="comment">//寻找需要向前插入的结点</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tmp = L;</span><br><span class="line">            <span class="keyword">while</span>(tmp-&gt;next-&gt;val &lt; cur-&gt;val)                                <span class="comment">//寻找插入位置</span></span><br><span class="line">                tmp = tmp-&gt;next;</span><br><span class="line">            pre-&gt;next = cur-&gt;next;                                          <span class="comment">//进行插入</span></span><br><span class="line">            cur-&gt;next = tmp-&gt;next;</span><br><span class="line">            tmp-&gt;next = cur;</span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> L-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Daily Training </tag>
            
            <tag> Insertion Sort </tag>
            
            <tag> Link List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2023/11/03/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/11/03/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>直观且简单的一种排序，将未排序的头个元素与后面的比较，选择最小的放到最前。时间复杂度为O(n^2^)，空间复杂度为O(1)。 </p><p>例如：[4, 7, 2, 5]   ——&gt; 将4与后面的7, 2, 5比较——&gt; 把最小的2与4的位置调换 ——&gt; 将第二位的7与后面的数字比较 ——&gt; 将7与后面数字中最小的4调换 …… 以此类推。</p><h5 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void selectionSort(int* nums, int numsSize) &#123;</span><br><span class="line">    int i, j, min;</span><br><span class="line">    for(i = 0; i &lt; numsSize - 1; ++i) &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        for(j = i + 1; j &lt; numsSize; ++j) &#123;</span><br><span class="line">            if(nums[j] &lt; nums[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int tmp = nums[min];</span><br><span class="line">        nums[min] = nums[i];</span><br><span class="line">        nums[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h5><p><a href="https://leetcode.cn/problems/can-make-arithmetic-progression-from-sequence/">判断能否形成等差数列</a></p><p><a href="https://leetcode.cn/problems/largest-number-at-least-twice-of-others/">至少是其他数字两倍的最大数</a></p><p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></p><p><a href="https://leetcode.cn/problems/sort-colors/">颜色分类</a></p><h5 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h5><p>4道题目均可以采用调用排序函数后对排序过的数组进行操作得出答案，由于较为简单，因此就不放题解了~</p><p>（绝对不是因为偷懒，绝对不是！）</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Daily Training </tag>
            
            <tag> Selection Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome! This is my first blog.</title>
      <link href="/2023/11/02/Welcome-This-is-my-first-blog/"/>
      <url>/2023/11/02/Welcome-This-is-my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome!"></a>Welcome!</h1><p>Welcome to my blog!</p><p>I will post some articles here. They might be useful, but I think most of them will be useless but funny. My native language is Chinese, so most of the articles will be written in Chinese. But I may translate some of them into English in order to improve my ability.</p><p>Thank you for spending time reading. See you again!</p>]]></content>
      
      
      <categories>
          
          <category> English Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Start </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客！</title>
      <link href="/2023/11/02/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81/"/>
      <url>/2023/11/02/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎！"><a href="#欢迎！" class="headerlink" title="欢迎！"></a>欢迎！</h1><p>我希望在这里分享一些有用或者有趣的东西。</p><p>作为一名技术小白，我希望有一个地方能够记录我的成长，并且同时能够帮助一些有需要的人。所以想到了搭建一个属于我自己的博客。在查阅了众多资料、解决了各种困难后，这个网站终于初现雏形。虽然他现在还很简陋，但是我相信随着我的进步，他一定会更加完善，最后变成一个优雅的个人博客。我很期待那一天的到来。</p><p>也欢迎大家访问、留言（后面会开放的……吧），希望能与小白共同成长，让大犇驻足相助~</p><h6 id="博客0-0测试版（因为当时没有截图所以找了一张相近的顶一下）"><a href="#博客0-0测试版（因为当时没有截图所以找了一张相近的顶一下）" class="headerlink" title="博客0.0测试版（因为当时没有截图所以找了一张相近的顶一下）"></a>博客0.0测试版（因为当时没有截图所以找了一张相近的顶一下）</h6><p><img src="https://s2.loli.net/2023/11/02/3apnkItSCyvBVQD.jpg" alt="屏幕截图 2023-11-02 172526.jpg"></p><h6 id="博客1-0测试版"><a href="#博客1-0测试版" class="headerlink" title="博客1.0测试版"></a>博客1.0测试版</h6><p><img src="https://s2.loli.net/2023/11/02/m7IPrzYM9tB6yFl.jpg" alt="屏幕截图 2023-11-02 172200.jpg"></p><h6 id="博客1-1发布版"><a href="#博客1-1发布版" class="headerlink" title="博客1.1发布版"></a>博客1.1发布版</h6><p><img src="https://s2.loli.net/2023/11/02/yxGDq8OVnbvKjc3.png" alt="屏幕截图 2023-11-02 180941.png"></p>]]></content>
      
      
      <categories>
          
          <category> 岁月史书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Start </tag>
            
            <tag> History </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/01/hello-world/"/>
      <url>/2023/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to a website created with <a href="https://hexo.io/">Hexo</a>! This is the very first post. To memorialize it, I named him “Hello World”.</p><p>Check <a href="https://hexo.io/docs/">documentation</a> for more info. If  get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h2><p>As you can see, this article is mostly created by Hoxe, a useful tool to build a blog. I keep this page not only   to show my gratitude, but also to help me when I forget how to use it. If you also want to set up a personal blog, you can try it! And remember, the official manual is always the best choice when you want to learn something.</p>]]></content>
      
      
      <categories>
          
          <category> English Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Start </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
